import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: "Order Tracking App",
      theme: ThemeData(
        primarySwatch: Colors.teal,
      ),
      home: const OrderTrackingPage(),
    );
  }
}

class OrderTrackingPage extends StatefulWidget {
  const OrderTrackingPage({super.key});

  @override
  State<OrderTrackingPage> createState() => _OrderTrackingPageState();
}

class _OrderTrackingPageState extends State<OrderTrackingPage> {
  // Dropdown filter options
  final List<String> statuses = [
    "All",
    "Order Placed",
    "Processing",
    "Shipped",
    "Out for Delivery",
    "Delivered"
  ];
  String selectedStatus = "All";

  // Search field
  String searchQuery = "";

  // Orders data
  final List<Order> orders = const [
    Order(
      id: "#12345",
      product: "iPhone 15 Pro",
      estimatedDelivery: "Aug 30, 2025",
      status: "Shipped",
      icon: Icons.phone_iphone,
    ),
    Order(
      id: "#12346",
      product: "MacBook Air M3",
      estimatedDelivery: "Sep 5, 2025",
      status: "Processing",
      icon: Icons.laptop_mac,
    ),
    Order(
      id: "#12347",
      product: "Samsung Galaxy S24",
      estimatedDelivery: "Aug 28, 2025",
      status: "Delivered",
      icon: Icons.phone_android,
    ),
    Order(
      id: "#12348",
      product: "Sony WH-1000XM5",
      estimatedDelivery: "Aug 29, 2025",
      status: "Out for Delivery",
      icon: Icons.headphones,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    // Apply dropdown + search filter
    List<Order> filteredOrders = orders.where((o) {
      final matchesStatus =
          selectedStatus == "All" ? true : o.status == selectedStatus;
      final matchesSearch =
          o.product.toLowerCase().contains(searchQuery.toLowerCase()) ||
          o.id.toLowerCase().contains(searchQuery.toLowerCase());
      return matchesStatus && matchesSearch;
    }).toList();

    return Scaffold(
      appBar: AppBar(
        title: const Text("Order Tracking Page"),
        backgroundColor: Colors.teal,
      ),
      body: Column(
        children: [
          // Search box
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: TextField(
              decoration: InputDecoration(
                prefixIcon: const Icon(Icons.search),
                hintText: "Search orders...",
                border:
                    OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              ),
              onChanged: (value) {
                setState(() {
                  searchQuery = value;
                });
              },
            ),
          ),

          // Dropdown filter
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12.0),
            child: Row(
              children: [
                const Text(
                  "Filter by Status: ",
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
                const SizedBox(width: 10),
                DropdownButton<String>(
                  value: selectedStatus,
                  items: statuses
                      .map((status) => DropdownMenuItem(
                          value: status, child: Text(status)))
                      .toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedStatus = value!;
                    });
                  },
                ),
              ],
            ),
          ),

          // Expanded ListView
          Expanded(
            child: filteredOrders.isEmpty
                ? const Center(
                    child: Text(
                      "No orders found",
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                    ),
                  )
                : ListView(
                    padding: const EdgeInsets.all(12),
                    children: filteredOrders
                        .map((order) => OrderItem(order: order))
                        .toList(),
                  ),
          ),
        ],
      ),
    );
  }
}

/// Order Model
class Order {
  final String id;
  final String product;
  final String estimatedDelivery;
  final String status;
  final IconData icon;

  const Order({
    required this.id,
    required this.product,
    required this.estimatedDelivery,
    required this.status,
    required this.icon,
  });
}

/// Custom Stateless Widget (like CourseItem)
class OrderItem extends StatelessWidget {
  final Order order;

  const OrderItem({super.key, required this.order});

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 3,
      margin: const EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: ListTile(
        leading: Icon(order.icon, size: 40, color: Colors.teal),
        title: Text(order.product,
            style: const TextStyle(fontWeight: FontWeight.bold)),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("Order ID: ${order.id}"),
            Text("Status: ${order.status}"),
            Text("Estimated Delivery: ${order.estimatedDelivery}"),
          ],
        ),
        isThreeLine: true,
        trailing: ElevatedButton(
          onPressed: () {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text("Tracking ${order.product}...")),
            );
          },
          child: const Text("Track"),
        ),
      ),
    );
  }
}
